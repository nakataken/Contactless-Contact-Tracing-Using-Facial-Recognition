<%- include("../partials/header.ejs", {title:"Visitors Records"}) %>
<!-- PWEDE ITRACE KUNG SAAN LUGAR PUMUNTA SI USER-->
<div class="home_adm container-fluid p-0"> 
    <%- include("../partials/navbar.ejs"); %>
    <div id="app" class="adm-records">
        <div v-if="admin">
            <form class="container">
                <div class="row row-cols-1 row-cols-md-3 g-2 g-lg-3">
                    <input list="visitors" placeholder="Select Visitor" v-model="searchVisitor" @change="submitVisitor" :disabled="disableVisitor">
                    <datalist id="visitors"> 
                        <option v-for="visitor in filteredVisitors" :key="visitor._id" :value="visitor._id">{{visitor.name.fname}} {{visitor.name.lname}}</option>
                    </datalist> 
                </div>
                <div>
                    <input  class="form-control" v-model="option" type="radio" name="option" value="byDate" checked :disabled="disableFields">
                    <label>Date - Date</label>
                    <input  class="form-control" v-model="option" type="radio" name="option" value="byTime" :disabled="disableFields">
                    <label>Time - Time</label>
                </div>
                <!-- First Option -->
                <div v-if="!toggleOption">
                    <div>
                        <label>From</label>
                        <input  class="form-control" type="date" v-model="filter.date1" id="date1" :max="max" :disabled="disableFields"><span>*</span>
                        <input  class="form-control" type="time" v-model="filter.time1" :disabled="disableFields">
                    </div>
                    <div>
                        <label>To</label>
                        <input  class="form-control" type="date" v-model="filter.date2" id="date2" :max="max" :disabled="disableFields"><span>*</span>
                        <input  class="form-control" type="time" v-model="filter.time2" :disabled="disableFields">
                    </div>
                </div>  
                <!-- Second Option -->
                <div v-else>
                    <div>
                        <label>Date</label>
                        <input  class="form-control" type="date" v-model="filter.date1" id="date1" :max="max"><span>*</span>
                        <label>From</label>
                        <input  class="form-control" type="time" v-model="filter.time1">
                        <label>From</label>
                        <input  class="form-control" type="time" v-model="filter.time2">
                    </div>
                </div>
                <p v-if="errorMessage">{{errorMessage}}</p>
                <button @click="clear">Clear</button>
                <button @click="submitFilter">Filter</button>
            </form>

            <div>
                <div>
                    <select @change="sortChange">
                        <option>Latest</option>
                        <option>Older</option>
                    </select>
                </div>
                <div>
                    <input type="text" v-model="searchEstablishment" placeholder="Filter by establishment name">
                </div>
            </div>

            <table>
                <thead>
                    <td>Name</td>
                    <td>Date & Time</td>
                    <td>Establishment</td>
                    <td></td>
                </thead>

                <tr v-for="log in filteredLogs" :key="log._id">
                    <td>{{log.name.fname}} {{log.name.lname}}</td>
                    <td>{{log.date}}</td>
                    <td>{{log.establishment}}</td>
                    <td><span @click="handleAction(log.visitor_id)">clickable option</span></td>
                </tr>
            </table>
        </div>
    </div>

</div>


<script>
    const app = Vue.createApp({
        data() {
            return {
                admin: JSON.parse('<%- JSON.stringify(admin) %>'),
                logs: [],
                sortOrder: "Latest",
                max: "",
                filter: {},
                visitors: [],
                searchVisitor: "",
                searchEstablishment: "",
                disableVisitor: false,
                disableFields: true,
                option: "byDate",
                toggleOption: false,
                errorMessage: "",
                reloadContent: async () => {
                    const response = await fetch("/admin/visitors/logs");
                    const result = await response.json();
                    this.logs = await result.logs;              
                },
                getVisitors: async () => {
                    const response = await fetch("/admin/visitors");
                    const result = await response.json();
                    this.visitors = await result.visitors;                
                }
            }
        },
        methods: {
            clear(event) {
                event.preventDefault();
                this.filter = {};
                this.visitors = [];
                this.searchVisitor = "";
                this.searchEstablishment = "",
                this.toggleOption = false;
                this.disableVisitor = false;
                this.disableFields = true;
                this.errorMessage = "";
                this.reloadContent();
                this.getVisitors();
            },
            async submitFilter(event) {
                event.preventDefault();

                // check required fields
                if(!this.filter.date1) {
                    this.errorMessage = "Fill up required fields."
                    return;
                }

                if(this.option == "byDate") {
                    if(!this.filter.date2) {
                        this.errorMessage = "Fill up required fields."
                        return;
                    }
                }

                this.errorMessage = "";

                let payload = {
                    option: this.option,
                    id: this.filter.id,
                    date1: this.filter.date1,
                    date2: this.filter.date2,
                    time1: this.filter.time1,
                    time2: this.filter.time2,
                }

                await fetch('/admin/visitors/records/filter', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(payload)
                }).then((response)=> {
                    response.json().then((data) => {
                        this.logs = data.logs;
                    });
                });
            },
            submitVisitor(event){
                this.filter.id = event.target.value;
                this.disableVisitor = true;
                this.disableFields = false;
            },
            sortChange(event) {
                this.sortOrder = event.target.value;
            },
            handleAction(id) {
                alert(id)
            }
        },
        watch: {
            option() {
                if(this.option === "byDate") {
                    this.toggleOption = false;
                } else {
                    this.toggleOption = true;
                }
            }
        },
        async mounted() {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) dd = '0' + dd;

            if (mm < 10) mm = '0' + mm;

            today = yyyy + '-' + mm + '-' + dd;

            this.max = today;

            await this.reloadContent();
            await this.getVisitors();
        },
        computed: {
            filteredLogs() {
                if(this.sortOrder == "Older") {
                    return this.logs.sort((a, b) => {
                        return new Date(a.date) - new Date(b.date);
                    }).filter((log) => {
                        return log.establishment.includes(this.searchEstablishment.toUpperCase());
                    });
                } else {
                    return this.logs.sort((a, b) => {
                        return new Date(b.date) - new Date(a.date);
                    }).filter((log) => {
                        return log.establishment.includes(this.searchEstablishment.toUpperCase());
                    });
                }
            },
            filteredVisitors() {
                return this.visitors.filter((visitor) => {
                    const name = `${visitor.name.fname.toUpperCase()} ${visitor.name.lname.toUpperCase()}`
                    return name.includes(this.searchVisitor.toUpperCase());
                })
            }
        }
    });

    app.mount('#app');
</script>


<%- include("../partials/footer.ejs"); %>
