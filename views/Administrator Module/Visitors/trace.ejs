<%- include("../partials/header.ejs", {title:"Visitors Trace"}) %>
<!-- PWEDE ITRACE KUNG SINO NAKASALAMUHA NI USER -->

    <div id="app">
        <div v-if="admin" class="home_adm  container-fluid p-0">
            <%- include("../partials/navbar.ejs"); %>
            <div class="app-wrapper">
                <div class="app-content pt-3 p-md-3 p-lg-4">
                    <div class="container-xl">
                        <div class="head container" >
                            <nav id="orders-table-tab" class="orders-table-tab app-nav-tabs nav shadow-sm flex-column flex-sm-row mb-4">
                                
                                <a class="flex-sm-fill text-sm-center nav-link active" id="orders-all-tab" data-bs-toggle="tab" href="" @click="tab = 1" role="tab" aria-controls="orders-all" aria-selected="true">Visitors</a>
                                <a class="flex-sm-fill text-sm-center nav-link"  id="orders-paid-tab" data-bs-toggle="tab" href="" @click="tab = 2" role="tab" aria-controls="orders-paid" aria-selected="false">Establishment</a>
                            </nav>
                            
                            <div v-if="tab == 1">
                                <%- include("../partials/tab_1.ejs"); %>
                            </div>
                            <div v-if="tab == 2">
                                <%- include("../partials/tab_2.ejs"); %>

                            </div>
                           
                            
                        </div>
                    </div>  
                </div>
            </div> 
        </div>
    </div>



<script>
    const app = Vue.createApp({
        data() {
            return {
                admin: JSON.parse('<%- JSON.stringify(admin) %>'),
                logs: [],
                sortOrder: "Latest",
                max: "",
                filter: {},
                establishments: [],
                disableEstablishments: false,
                disableFields: true,
                option: "byDate",
                toggleOption: false,
                errorMessage: "",
                searchEstablishment: "",
                searchVisitor: "",
                tab:1,
                disableVisitor: false,

                reloadContent: async () => {
                    const response = await fetch("/admin/visitors/logs");
                    const result = await response.json();
                    this.logs = await result.logs;                
                },
                getEstablishments: async () => {
                    const response = await fetch("/admin/establishments");
                    const result = await response.json();
                    this.establishments = await result.establishments;  
                }
            }
        },
        methods: {
            clear(event) {
                event.preventDefault();
                this.filter = {};
                this.toggleOption = false;
                this.searchEstablishment = "";
                this.disableEstablishments = false;
                this.disableFields = true;
                this.errorMessage = "";
                this.reloadContent();
                this.getEstablishments();
            },
            async submitFilter(event) {
                event.preventDefault();

                if(this.option == "byDate") {
                    if(!this.filter.date2) {
                        this.errorMessage = "Fill up required fields."
                        return;
                    }
                }

                this.errorMessage = "";

                let payload = {
                    option: this.option,
                    id: this.filter.id,
                    date1: this.filter.date1,
                    date2: this.filter.date2,
                    time1: this.filter.time1,
                    time2: this.filter.time2,
                }

                await fetch('/admin/visitors/trace/filter', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(payload)
                }).then((response)=> {
                    response.json().then((data) => {
                        this.logs = data.logs;
                        console.log(this.logs);
                    });
                });
            },
            submitEstablishment(event){
                this.filter.id = event.target.value;
                this.disableEstablishments = true;
                this.disableFields = false;
            },
            sortChange(event) {
                this.sortOrder = event.target.value;
            },
            handleAction(id) {
                alert(id)
            }
        },
        async mounted() {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) dd = '0' + dd;

            if (mm < 10) mm = '0' + mm;

            today = yyyy + '-' + mm + '-' + dd;

            this.max = today;

            await this.reloadContent();
            if(this.tab == 2){
                await this.getEstablishments();
            }
            
            
        },
        watch: {
            option() {
                if(this.option === "byDate") {
                    this.toggleOption = false;
                } else {
                    this.toggleOption = true;
                }
            }
        },
        computed: {
            filteredLogs() {
                if(this.sortOrder == "Older") {
                    return this.logs.sort((a, b) => {
                        return new Date(a.date) - new Date(b.date);
                    }).filter((log) => {
                        const name = `${log.name.fname.toUpperCase()} ${log.name.lname.toUpperCase()}`
                        return name.includes(this.searchVisitor.toUpperCase());
                    });
                } else {
                    return this.logs.sort((a, b) => {
                        return new Date(b.date) - new Date(a.date);
                    }).filter((log) => {
                        const name = `${log.name.fname.toUpperCase()} ${log.name.lname.toUpperCase()}`
                        return name.includes(this.searchVisitor.toUpperCase());
                    });
                }
            },
            filteredEstablishments() {
                return this.establishments.filter((establishment) => {
                    return establishment.name.includes(this.searchEstablishment.toUpperCase());
                })
            }
        }
    });

    app.mount('#app');
</script>
<%- include("../partials/footer.ejs"); %>

