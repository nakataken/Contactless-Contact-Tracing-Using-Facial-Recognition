<%- include("../partials/header.ejs", {title:"Visitors Trace"}) %>
<!-- PWEDE ITRACE KUNG SINO NAKASALAMUHA NI USER -->
    <%- include("../partials/navbar.ejs"); %>
    <div id="app">
        <div v-if="admin">
            <form>
                <!-- 1. Enter establishment name -->
                <div>
                    <label for="establishment">Establishment Name</label>
                    <input type="text" v-model="filter.establishment" :disabled="disableEstablishments">
                    <button @click="searchEstablishment">Search</button>
                    <p v-if="establishmentMessage">{{establishmentMessage}}</p>
                </div>

                <!-- 2. Load and choose specific establishment to get the specific id -->
                <select v-model="selectedEstablishment" @change="submitEstablishment">
                    <option value="none" disabled>Please select visitor.</option>
                    <option v-for="establishment in establishments" :key="establishment._id" :value="establishment._id">{{establishment.name}}</option>
                </select>
                
                <div>
                    <input v-model="option" type="radio" name="option" value="byDate" checked :disabled="disableFields">
                    <label>Date - Date</label>
                    <input v-model="option" type="radio" name="option" value="byTime" :disabled="disableFields">
                    <label>Time - Time</label>
                </div>

                <!-- First Option -->
                <div v-if="!toggleOption">
                    <div>
                        <label>From</label>
                        <input type="date" v-model="filter.date1" id="date1" :max="max" :disabled="disableFields"><span>*</span>
                        <input type="time" v-model="filter.time1" :disabled="disableFields">
                    </div>
                    <div>
                        <label>To</label>
                        <input type="date" v-model="filter.date2" id="date2" :max="max" :disabled="disableFields"><span>*</span>
                        <input type="time" v-model="filter.time2" :disabled="disableFields">
                    </div>
                </div>  
                <!-- Second Option -->
                <div v-else>
                    <div>
                        <label>Date</label>
                        <input type="date" v-model="filter.date1" id="date1" :max="max"><span>*</span>
                        <label>From</label>
                        <input type="time" v-model="filter.time1">
                        <label>From</label>
                        <input type="time" v-model="filter.time2">
                    </div>
                </div>
                <p v-if="errorMessage">{{errorMessage}}</p>
                <button @click="clear">Clear</button>
                <button @click="submitFilter">Filter</button>
            </form>

            <div>
                <div>
                    <select @change="sortChange">
                        <option>Latest</option>
                        <option>Older</option>
                    </select>
                </div>
                <div>
                    <label>Search by First or Last Name</label>
                    <input type="text" v-model="searchName">
                </div>
            </div>

            <table>
                <thead>
                    <td>Name</td>
                    <td>Date & Time</td>
                    <td>Establishment</td>
                    <td></td>
                </thead>

                <tr v-for="log in filteredLogs" :key="log._id">
                    <td>{{log.name.fname}} {{log.name.lname}}</td>
                    <td>{{log.date}}</td>
                    <td>{{log.establishment}}</td>
                    <td><span @click="handleAction(log.visitor_id)">clickable option</span></td>
                </tr>
            </table>
        </div>
    </div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                admin: JSON.parse('<%- JSON.stringify(admin) %>'),
                logs: [],
                sortOrder: "Latest",
                max: "",
                filter: {},
                establishments: [],
                selectedEstablishment: "none",
                disableEstablishments: false,
                establishmentMessage: "",
                disableFields: true,
                option: "byDate",
                toggleOption: false,
                errorMessage: "",
                searchName: "",
                reloadContent: async () => {
                    const response = await fetch("/admin/visitors/logs");
                    const result = await response.json();
                    this.logs = await result;                
                }
            }
        },
        methods: {
            clear(event) {
                event.preventDefault();
                this.filter = {};
                this.visitors = [];
                this.selectedEstablishment = "none";
                this.establishmentMessage = "";
                this.toggleOption = false;
                this.disableEstablishments = false;
                this.disableFields = true;
                this.errorMessage = "";
                this.reloadContent();
            },
            async submitFilter(event) {
                event.preventDefault();

                if(this.option == "byDate") {
                    if(!this.filter.date2) {
                        this.errorMessage = "Fill up required fields."
                        return;
                    }
                }

                this.errorMessage = "";

                let payload = {
                    option: this.option,
                    id: this.filter.id,
                    date1: this.filter.date1,
                    date2: this.filter.date2,
                    time1: this.filter.time1,
                    time2: this.filter.time2,
                }

                await fetch('/admin/visitors/trace/filter', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(payload)
                }).then((response)=> {
                    response.json().then((data) => {
                        console.log(data);
                        this.logs = data.logs;
                    });
                });
            },
            async searchEstablishment(event){
                event.preventDefault();

                if(!this.filter.establishment) {
                    this.establishmentMessage = "Enter establishment name!";
                    return
                }

                this.establishmentMessage = "";
                
                await fetch(`/admin/visitors/trace/search?name=${this.filter.establishment}`).then((response)=> {
                    response.json().then((data) => {
                        if(!data.establishments.length) {
                            this.establishmentMessage = "Establishment not found!";
                        } else {
                            this.establishments = data.establishments;
                            this.establishmentMessage = "Establishment/s loaded!";
                        }
                    });
                });;
            },
            submitEstablishment(event){
                this.establishmentMessage = "";
                this.filter.id = event.target.value;
                this.disableEstablishments = true;
                this.disableFields = false;
            },
            sortChange(event) {
                this.sortOrder = event.target.value;
            },
            handleAction(id) {
                alert(id)
            }
        },
        watch: {
            option() {
                if(this.option === "byDate") {
                    this.toggleOption = false;
                } else {
                    this.toggleOption = true;
                }
            }
        },
        mounted() {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) dd = '0' + dd;

            if (mm < 10) mm = '0' + mm;

            today = yyyy + '-' + mm + '-' + dd;

            this.max = today;
            this.reloadContent();
        },
        computed: {
            filteredLogs() {
                if(this.sortOrder == "Older") {
                    return this.logs.sort((a, b) => {
                        return new Date(a.date) - new Date(b.date);
                    }).filter((log) => {
                        return log.name.fname.includes(this.searchName) || log.name.lname.includes(this.searchName);
                    });
                } else {
                    return this.logs.sort((a, b) => {
                        return new Date(b.date) - new Date(a.date);
                    }).filter((log) => {
                        return log.name.fname.includes(this.searchName.toUpperCase()) || log.name.lname.includes(this.searchName.toUpperCase());
                    });
                }
            }
        }
    });

    app.mount('#app');
</script>


<%- include("../partials/footer.ejs"); %>
